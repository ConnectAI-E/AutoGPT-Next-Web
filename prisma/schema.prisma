generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  role           String?
  subscriptionId String?   @db.Text
  customerId     String?   @db.Text

  createDate DateTime @default(now())

  accounts Account[]
  sessions Session[]
  Agent    Agent[]

  @@index([email])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Agent {
  id     String @id @default(cuid())
  userId String
  name   String @db.Text
  goal   String @db.Text

  deleteDate DateTime?
  createDate DateTime  @default(now())

  user  User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks AgentTask[]

  @@index([userId, deleteDate, createDate])
}

model AgentTask {
  id      String  @id @default(cuid())
  taskId  String?
  parentTaskId String?
  agentId String
  type    String
  status  String?
  value   String  @db.Text
  info    String? @db.Text
  sort    Int

  deleteDate DateTime?
  createDate DateTime  @default(now())

  agent Agent @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@index([agentId])
  @@index([type])
}
